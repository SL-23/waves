{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/stephanielau/Desktop/code/projects/waves/client/src/Components/User/Admin/ManageWoods.js\";\nimport React, { Component } from 'react';\nimport FormField from '../../Utils/Form/FormField';\nimport { update, generateData, isFormValid, resetFields } from '../../Utils/Form/FormAction';\nimport { getWoods, addOneWood } from '../../../actions/products_action';\nimport { connect } from 'react-redux';\n\nclass ManageWoods extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formError: false,\n      formSuccess: false,\n      formData: {\n        name: {\n          element: 'input',\n          value: '',\n          config: {\n            label: 'Wood name',\n            name: 'name_input',\n            type: 'text',\n            placeholder: 'Enter the wood'\n          },\n          validation: {\n            required: true,\n            email: false\n          },\n          valid: false,\n          touched: false,\n          validationMessage: '',\n          showLabel: true\n        }\n      }\n    };\n\n    this.showCategoryItems = () => this.props.products.brands ? this.props.products.brands.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"category_item\",\n      children: [\" \", item.name, \" \"]\n    }, item.name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)) : null;\n\n    this.updateForm = element => {\n      const newFormdata = update(element, this.state.formData, 'brands');\n      this.setState({\n        formError: false,\n        formData: newFormdata\n      });\n    };\n\n    this.resetFieldsHandler = () => {\n      const newFormdata = resetFields(this.state.formData, 'brands');\n      this.setState({\n        formData: newFormdata,\n        formSuccess: true\n      });\n    };\n\n    this.submitForm = event => {\n      event.preventDefault();\n      let existingBrands = this.props.products.brands;\n      let dataToSubmit = generateData(this.state.formData, 'brands');\n      console.log(dataToSubmit);\n      let formIsValid = isFormValid(this.state.formData, 'brands');\n\n      if (formIsValid) {\n        this.props.dispatch(addOneBrand(dataToSubmit, existingBrands)).then(() => {\n          console.log(this.props.products);\n\n          if (this.props.products.addBrand) {\n            console.log('okoko');\n            this.resetFieldsHandler();\n          } else {\n            this.setState({\n              formError: true\n            });\n          }\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.props.dispatch(getWoods());\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"admin_category_wrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Brands\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"admin_two_column\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"left\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"brands_container\",\n            children: this.showCategoryItems()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 12\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"right\",\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: event => this.submitForm(event),\n            children: [/*#__PURE__*/_jsxDEV(FormField, {\n              id: 'name',\n              formData: this.state.formData.name,\n              change: element => this.updateForm(element)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 16\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: event => this.submitForm(event),\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 16\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 12\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    products: state.products\n  };\n};\n\nexport default connect(mapStateToProps)(ManageWoods);","map":{"version":3,"sources":["/Users/stephanielau/Desktop/code/projects/waves/client/src/Components/User/Admin/ManageWoods.js"],"names":["React","Component","FormField","update","generateData","isFormValid","resetFields","getWoods","addOneWood","connect","ManageWoods","state","formError","formSuccess","formData","name","element","value","config","label","type","placeholder","validation","required","email","valid","touched","validationMessage","showLabel","showCategoryItems","props","products","brands","map","item","updateForm","newFormdata","setState","resetFieldsHandler","submitForm","event","preventDefault","existingBrands","dataToSubmit","console","log","formIsValid","dispatch","addOneBrand","then","addBrand","componentDidMount","render","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport FormField from '../../Utils/Form/FormField';\nimport { update, generateData, isFormValid, resetFields } from '../../Utils/Form/FormAction';\nimport { getWoods, addOneWood } from '../../../actions/products_action';\n\nimport { connect } from 'react-redux';\n\n\nclass ManageWoods extends Component {\n\n\tstate = {\n\t    formError: false,\n\t    formSuccess: false,\n\t    formData: {\n\t      name: {\n\t        element: 'input',\n\t        value: '',\n\t        config: {\n\t          label:'Wood name',\n\t          name: 'name_input',\n\t          type: 'text',\n\t          placeholder: 'Enter the wood'\n\t        },\n\t        validation: {\n\t          required: true,\n\t          email: false\n\t        },\n\t        valid: false,\n\t        touched: false,\n\t        validationMessage:'',\n\t        showLabel: true\n\t      }\n\t  \t}\n  \t}\n  \n  \tcomponentDidMount() {\n  \t\tthis.props.dispatch(getWoods());\n  \t}\n\n  \tshowCategoryItems = () => (\n  \t\tthis.props.products.brands ?\n  \t\t\tthis.props.products.brands.map((item) => (\n  \t\t\t\t<div key={item.name} className='category_item'> {item.name} </div>\n  \t\t\t))\n  \t\t: null\n  \t)\n\n  \tupdateForm = (element) => {\n\n\t    const newFormdata = update(element, this.state.formData, 'brands');\n\t    this.setState({\n\t    \tformError: false,\n\t    \tformData: newFormdata\n\t    })\n  \t}\n\n  \tresetFieldsHandler = () => {\n  \t\tconst newFormdata = resetFields(this.state.formData, 'brands');\n\n  \t\tthis.setState({\n  \t\t\tformData: newFormdata,\n  \t\t\tformSuccess: true\n  \t\t});\n  \t}\n\n  \tsubmitForm = (event) => {\n\t    event.preventDefault();\n\t    let existingBrands = this.props.products.brands;\n\t    let dataToSubmit = generateData(this.state.formData, 'brands');\n\t    console.log(dataToSubmit)\n\t    let formIsValid = isFormValid(this.state.formData, 'brands');\n\t    if(formIsValid)\n\t    {\n\t    \tthis.props.dispatch(addOneBrand(dataToSubmit, existingBrands)).then(() => {\n        \t\tconsole.log(this.props.products);\n\t\t        if(this.props.products.addBrand) {\n\t\t        \tconsole.log('okoko');\n\t\t          \tthis.resetFieldsHandler();\n\n\t\t        }\n\t\t        else {\n\t\t          this.setState({formError: true})\n\t\t        }\n\t\t    })\n\t    }\n\t}\n\n  \trender() {\n    \treturn (\n      \t\t<div className='admin_category_wrapper'>\n      \t\t\t<h1>Brands</h1>\n      \t\t\t<div className='admin_two_column'>\n      \t\t\t\t<div className='left'>\n      \t\t\t\t\t<div className='brands_container'>\n      \t\t\t\t\t\t{ this.showCategoryItems() }\n      \t\t\t\t\t</div>\n      \t\t\t\t</div>\n      \t\t\t\t<div className='right'>\n      \t\t\t\t\t<form onSubmit={(event) => this.submitForm(event)} >\n\t\t\t            <FormField \n\t\t\t              id={'name'}\n\t\t\t              formData={this.state.formData.name}\n\t\t\t              change={(element)=> this.updateForm(element)}\n\t\t\t            />\n\t\t\t            <button onClick={(event)=> this.submitForm(event)}>\n\t\t\t               Submit\n\t\t\t            </button>\n      \t\t\t\t\t</form>\n      \t\t\t\t</div>\n      \t\t\t</div>\n        \t\t\n      \t\t</div>\n    \t)\n  }\n}\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tproducts: state.products\n\t}\n}\n\nexport default connect(mapStateToProps)(ManageWoods);"]},"metadata":{},"sourceType":"module"}