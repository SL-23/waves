{"ast":null,"code":"export const validate = (element, formData = []) => {\n  let error = [true, ''];\n\n  if (element.validation.email) {\n    const valid = /\\S+@\\S+\\.\\S+/.test(element.value);\n    const message = `${!valid ? 'Must be a valid email' : ''}`;\n    error = !valid ? [valid, message] : error;\n  }\n\n  if (element.validation.required) {\n    const valid = element.value.trim() !== '';\n    const message = `${!valid ? 'This field is required' : ''}`;\n    error = !valid ? [valid, message] : error;\n  }\n\n  if (element.validation.confirm) {\n    const valid = element.value.trim() !== formData[element.validation.confirm].value;\n    console.log(element.value.trim());\n    console.log(formData[element.validation.confirm].value);\n    console.log(valid);\n    const message = `${!valid ? 'Password do not match!' : ''}`;\n    error = !valid ? [valid, message] : error;\n  }\n\n  return error;\n};\nexport const update = (element, formData, formName) => {\n  const newFormData = { ...formData\n  };\n  const newElement = { ...newFormData[element.id]\n  };\n  newElement.value = element.event.target.value;\n\n  if (element.blur) {\n    let validData = validate(newElement, formData);\n    newElement.valid = validData[0];\n    newElement.validationMessage = validData[1];\n  }\n\n  newElement.touched = element.blur;\n  newFormData[element.id] = newElement;\n  return newFormData;\n};\nexport const generateData = (formData, formName) => {\n  let dataToSubmit = {};\n\n  for (let key in formData) {\n    if (key != 'confirmPassword') {\n      dataToSubmit[key] = formData[key].value;\n    }\n  }\n\n  return dataToSubmit;\n};\nexport const isFormValid = (formData, formName) => {\n  let formIsValid = true;\n\n  for (let key in formData) {\n    formIsValid = formData[key].valid && formIsValid;\n  }\n\n  return formIsValid;\n};","map":{"version":3,"sources":["/Users/stephanielau/Desktop/code/projects/waves/client/src/Components/Utils/Form/FormAction.js"],"names":["validate","element","formData","error","validation","email","valid","test","value","message","required","trim","confirm","console","log","update","formName","newFormData","newElement","id","event","target","blur","validData","validationMessage","touched","generateData","dataToSubmit","key","isFormValid","formIsValid"],"mappings":"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","sourcesContent":["\nexport const validate = (element, formData = []) => {\n\tlet error = [true, ''];\n\n\tif(element.validation.email){\n\t\tconst valid = /\\S+@\\S+\\.\\S+/.test(element.value);\n\t\tconst message = `${!valid ? 'Must be a valid email' : ''}`;\n\t\terror = !valid ? [valid, message] : error;\n\t}\n\n\tif(element.validation.required){\n\t\tconst valid = element.value.trim() !== '';\n\t\tconst message = `${!valid ? 'This field is required' : ''}`;\n\t\terror = !valid ? [valid, message] : error;\n\t}\n\n\tif(element.validation.confirm)\n\t{\n\t\tconst valid = element.value.trim() !== formData[element.validation.confirm].value;\n\t\tconsole.log(element.value.trim());\n\t\tconsole.log(formData[element.validation.confirm].value);\n\t\tconsole.log(valid)\n\t\tconst message = `${!valid ? 'Password do not match!' : ''}`;\n\t\terror = !valid ? [valid, message] : error;\n\t}\n\n\n\n\treturn error;\n}\n\nexport const update = (element, formData, formName) => {\n\tconst newFormData = {\n\t\t...formData\n\t}\n\tconst newElement = {\n\t\t...newFormData[element.id]\n\t}\n\n\tnewElement.value = element.event.target.value;\n\n\tif(element.blur){\n\t\tlet validData = validate(newElement, formData);\n\t\tnewElement.valid = validData[0];\n\t\tnewElement.validationMessage = validData[1];\n\t}\n\n\tnewElement.touched = element.blur;\n\tnewFormData[element.id] = newElement;\n\n\treturn newFormData;\n}\n\nexport const generateData = (formData, formName) => {\n\tlet dataToSubmit = {};\n\tfor(let key in formData)\n\t{\n\t\tif(key != 'confirmPassword')\n\t\t{\n\t\t\tdataToSubmit[key] = formData[key].value;\n\t\t}\n\t\t\n\t}\n\treturn dataToSubmit;\n}\n\nexport const isFormValid = (formData, formName) => {\n\tlet formIsValid = true;\n\tfor(let key in formData)\n\t{\n\t\tformIsValid = formData[key].valid && formIsValid;\n\t}\n\treturn formIsValid;\n\n}"]},"metadata":{},"sourceType":"module"}