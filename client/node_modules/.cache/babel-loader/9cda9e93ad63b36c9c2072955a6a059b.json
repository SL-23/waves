{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertHexToRGB = convertHexToRGB;\nexports.decomposeColor = decomposeColor;\nexports.recomposeColor = recomposeColor;\nexports.getContrastRatio = getContrastRatio;\nexports.getLuminance = getLuminance;\nexports.emphasize = emphasize;\nexports.fade = fade;\nexports.darken = darken;\nexports.lighten = lighten;\n\nvar _warning = _interopRequireDefault(require(\"warning\")); //  weak\n\n/* eslint-disable no-use-before-define */\n\n/**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\n\n\nfunction clamp(value) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(value >= min && value <= max, \"Material-UI: the value provided \".concat(value, \" is out of range [\").concat(min, \", \").concat(max, \"].\")) : void 0;\n\n  if (value < min) {\n    return min;\n  }\n\n  if (value > max) {\n    return max;\n  }\n\n  return value;\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nfunction convertHexToRGB(color) {\n  color = color.substr(1);\n  var re = new RegExp(\".{1,\".concat(color.length / 3, \"}\"), 'g');\n  var colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(function (n) {\n      return n + n;\n    });\n  }\n\n  return colors ? \"rgb(\".concat(colors.map(function (n) {\n    return parseInt(n, 16);\n  }).join(', '), \")\") : '';\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\n\n\nfunction decomposeColor(color) {\n  if (color.charAt(0) === '#') {\n    return decomposeColor(convertHexToRGB(color));\n  }\n\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n  var values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map(function (value) {\n    return parseFloat(value);\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\n      throw new Error([\"Material-UI: unsupported `\".concat(color, \"` color.\"), 'We support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().'].join('\\n'));\n    }\n  }\n\n  return {\n    type: type,\n    values: values\n  };\n}\n/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\n\nfunction recomposeColor(color) {\n  var type = color.type;\n  var values = color.values;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map(function (n, i) {\n      return i < 3 ? parseInt(n, 10) : n;\n    });\n  }\n\n  if (type.indexOf('hsl') !== -1) {\n    values[1] = \"\".concat(values[1], \"%\");\n    values[2] = \"\".concat(values[2], \"%\");\n  }\n\n  return \"\".concat(color.type, \"(\").concat(values.join(', '), \")\");\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\n\n\nfunction getContrastRatio(foreground, background) {\n  var lumA = getLuminance(foreground);\n  var lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\n\nfunction getLuminance(color) {\n  var decomposedColor = decomposeColor(color);\n\n  if (decomposedColor.type.indexOf('rgb') !== -1) {\n    var rgb = decomposedColor.values.map(function (val) {\n      val /= 255; // normalized\n\n      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n    }); // Truncate at 3 digits\n\n    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n  } // else if (decomposedColor.type.indexOf('hsl') !== -1)\n\n\n  return decomposedColor.values[2] / 100;\n}\n/**\n * Darken or lighten a colour, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction emphasize(color) {\n  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction fade(color, value) {\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(color, \"Material-UI: missing color argument in fade(\".concat(color, \", \").concat(value, \").\")) : void 0;\n  if (!color) return color;\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  color.values[3] = value;\n  return recomposeColor(color);\n}\n/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction darken(color, coefficient) {\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(color, \"Material-UI: missing color argument in darken(\".concat(color, \", \").concat(coefficient, \").\")) : void 0;\n  if (!color) return color;\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction lighten(color, coefficient) {\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(color, \"Material-UI: missing color argument in lighten(\".concat(color, \", \").concat(coefficient, \").\")) : void 0;\n  if (!color) return color;\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}","map":{"version":3,"sources":["/Users/stephanielau/Projects/waves/client/node_modules/@material-ui/core/styles/colorManipulator.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","convertHexToRGB","decomposeColor","recomposeColor","getContrastRatio","getLuminance","emphasize","fade","darken","lighten","_warning","clamp","min","arguments","length","undefined","max","process","env","NODE_ENV","default","concat","color","substr","re","RegExp","colors","match","map","n","parseInt","join","charAt","marker","indexOf","type","substring","values","split","parseFloat","Error","i","foreground","background","lumA","lumB","Math","decomposedColor","rgb","val","pow","Number","toFixed","coefficient"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/builtin/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.convertHexToRGB = convertHexToRGB;\nexports.decomposeColor = decomposeColor;\nexports.recomposeColor = recomposeColor;\nexports.getContrastRatio = getContrastRatio;\nexports.getLuminance = getLuminance;\nexports.emphasize = emphasize;\nexports.fade = fade;\nexports.darken = darken;\nexports.lighten = lighten;\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\n//  weak\n\n/* eslint-disable no-use-before-define */\n\n/**\n * Returns a number whose value is limited to the given range.\n *\n * @param {number} value The value to be clamped\n * @param {number} min The lower boundary of the output range\n * @param {number} max The upper boundary of the output range\n * @returns {number} A number in the range [min, max]\n */\nfunction clamp(value) {\n  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(value >= min && value <= max, \"Material-UI: the value provided \".concat(value, \" is out of range [\").concat(min, \", \").concat(max, \"].\")) : void 0;\n\n  if (value < min) {\n    return min;\n  }\n\n  if (value > max) {\n    return max;\n  }\n\n  return value;\n}\n/**\n * Converts a color from CSS hex format to CSS rgb format.\n *\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\n * @returns {string} A CSS rgb color string\n */\n\n\nfunction convertHexToRGB(color) {\n  color = color.substr(1);\n  var re = new RegExp(\".{1,\".concat(color.length / 3, \"}\"), 'g');\n  var colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(function (n) {\n      return n + n;\n    });\n  }\n\n  return colors ? \"rgb(\".concat(colors.map(function (n) {\n    return parseInt(n, 16);\n  }).join(', '), \")\") : '';\n}\n/**\n * Returns an object with the type and values of a color.\n *\n * Note: Does not support rgb % values.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {object} - A MUI color object: {type: string, values: number[]}\n */\n\n\nfunction decomposeColor(color) {\n  if (color.charAt(0) === '#') {\n    return decomposeColor(convertHexToRGB(color));\n  }\n\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n  var values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map(function (value) {\n    return parseFloat(value);\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\n      throw new Error([\"Material-UI: unsupported `\".concat(color, \"` color.\"), 'We support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().'].join('\\n'));\n    }\n  }\n\n  return {\n    type: type,\n    values: values\n  };\n}\n/**\n * Converts a color object with type and values to a string.\n *\n * @param {object} color - Decomposed color\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\n * @returns {string} A CSS color string\n */\n\n\nfunction recomposeColor(color) {\n  var type = color.type;\n  var values = color.values;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map(function (n, i) {\n      return i < 3 ? parseInt(n, 10) : n;\n    });\n  }\n\n  if (type.indexOf('hsl') !== -1) {\n    values[1] = \"\".concat(values[1], \"%\");\n    values[2] = \"\".concat(values[2], \"%\");\n  }\n\n  return \"\".concat(color.type, \"(\").concat(values.join(', '), \")\");\n}\n/**\n * Calculates the contrast ratio between two colors.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} A contrast ratio value in the range 0 - 21.\n */\n\n\nfunction getContrastRatio(foreground, background) {\n  var lumA = getLuminance(foreground);\n  var lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\n * The relative brightness of any point in a color space,\n * normalized to 0 for darkest black and 1 for lightest white.\n *\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @returns {number} The relative brightness of the color in the range 0 - 1\n */\n\n\nfunction getLuminance(color) {\n  var decomposedColor = decomposeColor(color);\n\n  if (decomposedColor.type.indexOf('rgb') !== -1) {\n    var rgb = decomposedColor.values.map(function (val) {\n      val /= 255; // normalized\n\n      return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n    }); // Truncate at 3 digits\n\n    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n  } // else if (decomposedColor.type.indexOf('hsl') !== -1)\n\n\n  return decomposedColor.values[2] / 100;\n}\n/**\n * Darken or lighten a colour, depending on its luminance.\n * Light colors are darkened, dark colors are lightened.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction emphasize(color) {\n  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n/**\n * Set the absolute transparency of a color.\n * Any existing alpha values are overwritten.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} value - value to set the alpha channel to in the range 0 -1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction fade(color, value) {\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(color, \"Material-UI: missing color argument in fade(\".concat(color, \", \").concat(value, \").\")) : void 0;\n  if (!color) return color;\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  color.values[3] = value;\n  return recomposeColor(color);\n}\n/**\n * Darkens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction darken(color, coefficient) {\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(color, \"Material-UI: missing color argument in darken(\".concat(color, \", \").concat(coefficient, \").\")) : void 0;\n  if (!color) return color;\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\n * Lightens a color.\n *\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\n * @param {number} coefficient - multiplier in the range 0 - 1\n * @returns {string} A CSS color string. Hex input values are returned as rgb\n */\n\n\nfunction lighten(color, coefficient) {\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(color, \"Material-UI: missing color argument in lighten(\".concat(color, \", \").concat(coefficient, \").\")) : void 0;\n  if (!color) return color;\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}"]},"metadata":{},"sourceType":"script"}