{"ast":null,"code":"export const validate = (element, formData = []) => {\n  let error = [true, ''];\n\n  if (element.validation.email) {\n    const valid = /\\S+@\\S+\\.\\S+/.test(element.value);\n    const message = `${!valid ? 'Must be a valid email' : ''}`;\n    error = !valid ? [valid, message] : error;\n  }\n\n  if (element.validation.required) {\n    const valid = element.value.trim() !== '';\n    const message = `${!valid ? 'This field is required' : ''}`;\n    error = !valid ? [valid, message] : error;\n  }\n\n  if (element.validation.confirm) {\n    const valid = element.value.trim() === formData[element.validation.confirm].value;\n    const message = `${!valid ? 'Password do not match!' : ''}`;\n    error = !valid ? [valid, message] : error;\n  }\n\n  return error;\n};\nexport const update = (element, formData, formName) => {\n  const newFormData = { ...formData\n  };\n  const newElement = { ...newFormData[element.id]\n  };\n  newElement.value = element.event.target.value;\n\n  if (element.blur) {\n    let validData = validate(newElement, formData);\n    newElement.valid = validData[0];\n    newElement.validationMessage = validData[1];\n  }\n\n  newElement.touched = element.blur;\n  newFormData[element.id] = newElement;\n  return newFormData;\n};\nexport const generateData = (formData, formName) => {\n  let dataToSubmit = {};\n\n  for (let key in formData) {\n    if (key !== 'confirmPassword') {\n      dataToSubmit[key] = formData[key].value;\n    }\n  }\n\n  return dataToSubmit;\n};\nexport const isFormValid = (formData, formName) => {\n  let formIsValid = true;\n\n  for (let key in formData) {\n    formIsValid = formData[key].valid && formIsValid;\n  }\n\n  return formIsValid;\n};\nexport const populateOptionFields = (formData, arrayData = [], field) => {\n  const newArr = [];\n  const newFormData = { ...formData\n  };\n  arrayData.forEach(item => {\n    newArr.push({\n      key: item.name,\n      value: item._id\n    });\n  });\n  newFormData[field].config.options = newArr;\n  return newFormData;\n};\nexport const resetFields = (formData, formName) => {\n  const newFormData = { ...formData\n  };\n\n  for (let key in newFormData) {\n    if (key === 'images') {\n      newFormData[key].value = [];\n    } else {\n      newFormData[key].value = '';\n    }\n\n    newFormData[key].valid = false;\n    newFormData[key].touched = false;\n    newFormData[key].validationMessage = '';\n  }\n\n  return newFormData;\n};\nexport const populateFields = (formData, fields) => {\n  for (let key in formData) {\n    formData[key].value = fields[key];\n    formData[key].valid = true;\n    formData[key].touched = true;\n    formData[key].validationMessage = '';\n  }\n\n  return formData;\n};","map":{"version":3,"sources":["/Users/stephanielau/Projects/waves/client/src/Components/Utils/Form/FormAction.js"],"names":["validate","element","formData","error","validation","email","valid","test","value","message","required","trim","confirm","update","formName","newFormData","newElement","id","event","target","blur","validData","validationMessage","touched","generateData","dataToSubmit","key","isFormValid","formIsValid","populateOptionFields","arrayData","field","newArr","forEach","item","push","name","_id","config","options","resetFields","populateFields","fields"],"mappings":"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","sourcesContent":["\nexport const validate = (element, formData = []) => {\n\tlet error = [true, ''];\n\n\tif(element.validation.email){\n\t\tconst valid = /\\S+@\\S+\\.\\S+/.test(element.value);\n\t\tconst message = `${!valid ? 'Must be a valid email' : ''}`;\n\t\terror = !valid ? [valid, message] : error;\n\t}\n\n\tif(element.validation.required){\n\t\tconst valid = element.value.trim() !== '';\n\t\tconst message = `${!valid ? 'This field is required' : ''}`;\n\t\terror = !valid ? [valid, message] : error;\n\t}\n\n\tif(element.validation.confirm)\n\t{\n\t\tconst valid = element.value.trim() === formData[element.validation.confirm].value;\n\t\tconst message = `${!valid ? 'Password do not match!' : ''}`;\n\t\terror = !valid ? [valid, message] : error;\n\t}\n\n\n\n\treturn error;\n}\n\nexport const update = (element, formData, formName) => {\n\tconst newFormData = {\n\t\t...formData\n\t}\n\tconst newElement = {\n\t\t...newFormData[element.id]\n\t}\n\n\tnewElement.value = element.event.target.value;\n\n\tif(element.blur){\n\t\tlet validData = validate(newElement, formData);\n\t\tnewElement.valid = validData[0];\n\t\tnewElement.validationMessage = validData[1];\n\t}\n\n\tnewElement.touched = element.blur;\n\tnewFormData[element.id] = newElement;\n\n\treturn newFormData;\n}\n\nexport const generateData = (formData, formName) => {\n\tlet dataToSubmit = {};\n\tfor(let key in formData)\n\t{\n\t\tif(key !== 'confirmPassword')\n\t\t{\n\t\t\tdataToSubmit[key] = formData[key].value;\n\t\t}\n\t\t\n\t}\n\treturn dataToSubmit;\n}\n\nexport const isFormValid = (formData, formName) => {\n\tlet formIsValid = true;\n\tfor(let key in formData)\n\t{\n\t\tformIsValid = formData[key].valid && formIsValid;\n\t}\n\treturn formIsValid;\n\n}\n\n\nexport const populateOptionFields = (formData, arrayData = [], field) => {\n\tconst newArr = [];\n\tconst newFormData = {...formData};\n\n\tarrayData.forEach(item => {\n\t\tnewArr.push({ key: item.name, value: item._id});\n\t})\n\n\tnewFormData[field].config.options = newArr;\n\t\n\treturn newFormData;\n\n}\n\nexport const resetFields = (formData, formName) => {\n\tconst newFormData = {...formData};\n\n\tfor(let key in newFormData)\n\t{\n\t\tif(key === 'images') {\n\t\t\tnewFormData[key].value = [];\n\t\t}\n\t\telse {\n\t\t\tnewFormData[key].value = '';\n\t\t}\n\t\t\n\t\tnewFormData[key].valid = false;\n\t\tnewFormData[key].touched = false;\n\t\tnewFormData[key].validationMessage = '';\n\t}\t\n\n\treturn newFormData;\n}\n\nexport const populateFields = (formData, fields) => {\n\tfor(let key in formData) {\n\t\tformData[key].value = fields[key];\n\t\tformData[key].valid = true;\n\t\tformData[key].touched = true;\n\t\tformData[key].validationMessage = '';\n\t}\n\n\treturn formData;\n\n}"]},"metadata":{},"sourceType":"module"}